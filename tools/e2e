#!/bin/bash
set -eo pipefail

# Dir setup
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. "${DIR}/common"
ROOT=$(dirname "${DIR}")

# Check if required tools are installed
has_tools kubectl

# Cleanup function for graceful exit
cleanup() {
  echo "Cleaning up..."
  pkill -f "kubectl port-forward" || true
  rm -f /tmp/metrics.txt
}

# Set trap for cleanup on exit
trap cleanup EXIT

# Wait for nodes to be ready
kubectl wait --for=condition=Ready node --all --timeout=120s

# Tag Nodes
kubectl get nodes -l '!node-role.kubernetes.io/control-plane' -o name | \
  xargs -I {} kubectl label {} run.ai/simulated-gpu-node-pool=gpu --overwrite

# Apply dev deployment
kubectl apply -k deployment/overlays/stdout

# Restart the deployment to pick up any changes
kubectl rollout restart deployment/gpuid -n gpuid

# Wait for the deployment to be available
kubectl wait --for=condition=available --timeout=60s deployment/gpuid -n gpuid 

# Wait for deployment pod to be running
kubectl rollout status deployment/gpuid -n gpuid --timeout=60s

# Print container imageID for debugging
IMAGE=$(kubectl get pods \
  -n gpuid \
  -l app=gpuid \
  -o jsonpath="{.items[0].status.containerStatuses[0].imageID}")
msg "Using image: $IMAGE"

# Verify metrics are being exposed
msg "Checking metrics endpoint..."

# Use kubectl port-forward to access metrics
msg "Using port-forward to access metrics..."
kubectl port-forward -n gpuid service/gpuid 8080:8080 >/dev/null 2>&1 &
PF_PID=$!

# Wait for port-forward to establish
sleep 5

# Fetch metrics with timeout
echo "Fetching metrics..."
if timeout 10 curl -s "http://localhost:8080/metrics" > /tmp/metrics.txt; then
  msg "Successfully fetched metrics"
else
  err "ERROR: Failed to fetch metrics via port-forward"
fi

# Clean up test resources (handled by trap)
msg "Integration test passed"