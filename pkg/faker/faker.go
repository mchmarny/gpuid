package faker

import (
	"errors"
	"fmt"
	"log/slog"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

// Config holds configuration for the GPU faker
type Config struct {
	// XMLFilePath is the path to the XML file to serve as nvidia-smi output
	XMLFilePath string
	// LogLevel is the logging level (debug, info, warn, error)
	LogLevel string
}

// GPUFaker simulates nvidia-smi command behavior
type GPUFaker struct {
	config     Config
	logger     *slog.Logger
	xmlContent string
}

// New creates a new GPU faker instance
func New(config Config) (*GPUFaker, error) {
	level := parseLogLevel(config.LogLevel)
	logger := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
		Level: level,
	}))

	faker := &GPUFaker{
		config: config,
		logger: logger,
	}

	if err := faker.loadXMLContent(); err != nil {
		return nil, fmt.Errorf("failed to load XML content: %w", err)
	}

	return faker, nil
}

// loadXMLContent reads the XML file content
func (f *GPUFaker) loadXMLContent() error {
	if f.config.XMLFilePath == "" {
		return fmt.Errorf("XML file path is not configured")
	}

	// Check if file exists
	if _, err := os.Stat(f.config.XMLFilePath); os.IsNotExist(err) {
		return fmt.Errorf("XML file does not exist: %s", f.config.XMLFilePath)
	}

	// Read file content
	content, err := os.ReadFile(f.config.XMLFilePath)
	if err != nil {
		return fmt.Errorf("failed to read XML file: %w", err)
	}

	f.xmlContent = string(content)
	f.logger.Info("loaded XML content",
		"file", f.config.XMLFilePath,
		"size", len(f.xmlContent))

	return nil
}

// HandleNvidiaSMI processes nvidia-smi commands and returns fake output
func (f *GPUFaker) HandleNvidiaSMI(args []string) (string, error) {
	f.logger.Debug("handling nvidia-smi command", "args", args)

	// Check if this is the query command we want to fake
	if len(args) >= 2 && args[0] == "-q" && args[1] == "-x" {
		if f.xmlContent == "" {
			return "", fmt.Errorf("XML content not loaded")
		}
		f.logger.Info("returning fake nvidia-smi XML output")
		return f.xmlContent, nil
	}

	// For other nvidia-smi commands, return a simple response
	f.logger.Debug("returning basic nvidia-smi response for unsupported args")
	return "NVIDIA-SMI 550.86.15    Driver Version: 550.86.15    CUDA Version: 12.8\n", nil
}

// InstallFakeNvidiaSMI creates a fake nvidia-smi script in the system PATH
func (f *GPUFaker) InstallFakeNvidiaSMI() error {
	// Create fake nvidia-smi script
	scriptContent := f.generateNvidiaSMIScript()

	// Write to /usr/local/bin/nvidia-smi (or another location in PATH)
	scriptPath := "/usr/local/bin/nvidia-smi"

	// Create directory if it doesn't exist
	if err := os.MkdirAll(filepath.Dir(scriptPath), 0755); err != nil {
		return fmt.Errorf("failed to create directory: %w", err)
	}

	// Write script
	if err := os.WriteFile(scriptPath, []byte(scriptContent), 0600); err != nil {
		return fmt.Errorf("failed to write nvidia-smi script: %w", err)
	}

	// Make script executable
	if err := os.Chmod(scriptPath, 0755); err != nil {
		return fmt.Errorf("failed to make script executable: %w", err)
	}

	f.logger.Info("installed fake nvidia-smi script", "path", scriptPath)
	return nil
}

// generateNvidiaSMIScript creates the fake nvidia-smi shell script
func (f *GPUFaker) generateNvidiaSMIScript() string {
	xmlPath := f.config.XMLFilePath
	if xmlPath == "" {
		xmlPath = "/tmp/smi.xml" // fallback path
	}

	return fmt.Sprintf(`#!/bin/bash
# Fake nvidia-smi script for GPU testing
# Generated by gpuid faker

case "$*" in
    "-q -x")
        # Return XML content for query
        if [ -f "%s" ]; then
            cat "%s"
        else
            echo "Error: XML file not found: %s" >&2
            exit 1
        fi
        ;;
    "--version" | "-V")
        echo "nvidia-smi 550.86.15 (fake)"
        ;;
    "--help" | "-h")
        echo "nvidia-smi fake implementation for testing"
        echo "Supports: -q -x, --version, --help"
        ;;
    *)
        echo "NVIDIA-SMI 550.86.15    Driver Version: 550.86.15    CUDA Version: 12.8 (fake)"
        ;;
esac
`, xmlPath, xmlPath, xmlPath)
}

// ServeForever runs the faker in server mode, keeping the container alive
func (f *GPUFaker) ServeForever() error {
	f.logger.Info("starting GPU faker in server mode")

	// Install fake nvidia-smi if
	if err := f.InstallFakeNvidiaSMI(); err != nil {
		return fmt.Errorf("failed to install fake nvidia-smi: %w", err)
	}

	// Log configuration
	f.logger.Info("GPU faker configuration",
		"xml_file", f.config.XMLFilePath,
		"log_level", f.config.LogLevel)

	// Keep the process running
	f.logger.Info("GPU faker is ready and waiting...")

	// Read from stdin to keep alive (useful for kubernetes exec)
	// This allows the pod to stay running and respond to exec commands
	select {} // Block forever
}

// ExecuteCommand simulates command execution (for direct API usage)
func (f *GPUFaker) ExecuteCommand(command string, args []string) (string, string, error) {
	f.logger.Debug("executing command", "command", command, "args", args)

	if command == "nvidia-smi" {
		output, err := f.HandleNvidiaSMI(args)
		if err != nil {
			return "", err.Error(), err
		}
		return output, "", nil
	}

	// For other commands, try to execute them normally (if they exist)
	cmd := exec.Command(command, args...)

	stdout, err := cmd.Output()
	if err != nil {
		var exitError *exec.ExitError
		if errors.As(err, &exitError) {
			return string(stdout), string(exitError.Stderr), err
		}
		return "", err.Error(), err
	}

	return string(stdout), "", nil
}

// parseLogLevel converts string log level to slog.Level
func parseLogLevel(level string) slog.Level {
	switch strings.ToLower(strings.TrimSpace(level)) {
	case "debug":
		return slog.LevelDebug
	case "info", "":
		return slog.LevelInfo
	case "warn", "warning":
		return slog.LevelWarn
	case "error":
		return slog.LevelError
	default:
		return slog.LevelInfo
	}
}

// GetXMLContent returns the loaded XML content
func (f *GPUFaker) GetXMLContent() string {
	return f.xmlContent
}

// SetXMLContent sets the XML content directly (useful for testing)
func (f *GPUFaker) SetXMLContent(content string) {
	f.xmlContent = content
	f.logger.Debug("XML content set directly", "size", len(content))
}
